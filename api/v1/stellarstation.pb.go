// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/stellarstation.proto

package stellarstation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A type of framing of a binary payload used in satellite communicaation.
type Framing int32

const (
	// No framing done in the API. All payloads are assumed to be pre-framed and ready for
	// transmission to the satellite or API client with no additional processing.
	Framing_BITSTREAM Framing = 0
	// AX.25 (Amateur X.25) framing - https://en.wikipedia.org/wiki/AX.25
	Framing_AX25 Framing = 1
	// No framing or demodulation done in the API. Raw IQ data is sent to the API client with no
	// additional processing.
	Framing_IQ Framing = 2
	// A decoded PNG image frame.
	Framing_IMAGE_PNG Framing = 3
)

var Framing_name = map[int32]string{
	0: "BITSTREAM",
	1: "AX25",
	2: "IQ",
	3: "IMAGE_PNG",
}
var Framing_value = map[string]int32{
	"BITSTREAM": 0,
	"AX25":      1,
	"IQ":        2,
	"IMAGE_PNG": 3,
}

func (x Framing) String() string {
	return proto.EnumName(Framing_name, int32(x))
}
func (Framing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{0}
}

// Status of a plan.
type Plan_Status int32

const (
	// The plan has been scheduled and will be executed at `aos_time`.
	Plan_RESERVED Plan_Status = 0
	// The plan is currently executing.
	Plan_EXECUTING Plan_Status = 1
	// The plan has executed successfully.
	Plan_SUCCEEDED Plan_Status = 2
	// The plan has executed but was not successful.
	Plan_FAILED Plan_Status = 3
	// The plan has been cancelled and will not be executed.
	Plan_CANCELLED Plan_Status = 4
)

var Plan_Status_name = map[int32]string{
	0: "RESERVED",
	1: "EXECUTING",
	2: "SUCCEEDED",
	3: "FAILED",
	4: "CANCELLED",
}
var Plan_Status_value = map[string]int32{
	"RESERVED":  0,
	"EXECUTING": 1,
	"SUCCEEDED": 2,
	"FAILED":    3,
	"CANCELLED": 4,
}

func (x Plan_Status) String() string {
	return proto.EnumName(Plan_Status_name, int32(x))
}
func (Plan_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{7, 0}
}

// Request for the `OpenSatelliteStream` method.
type SatelliteStreamRequest struct {
	// The ID of the satellite to open a stream with. The ID of a satellite can be found on the
	// StellarStation Console page for the satellite.
	SatelliteId string `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The `SatelliteStreamResponse.stream_id` from a previously opened stream to resume. If the
	// specified stream has already expired or been closed, the stream is closed with a `ABORTED`
	// error.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// A request to send on the satellite stream. Currently only command sending to the satellite is
	// supported. The request does not need to be filled on the first request to
	// `OpenSatelliteStream`.
	//
	// Types that are valid to be assigned to Request:
	//	*SatelliteStreamRequest_SendSatelliteCommandsRequest
	Request isSatelliteStreamRequest_Request `protobuf_oneof:"Request"`
	// The `Framing` types to accept, for satellites that have been configured for multiple framings
	// (e.g., IQ + AX25). If empty, all framings produced by the satellite will be returned.
	AcceptedFraming      []Framing `protobuf:"varint,4,rep,packed,name=accepted_framing,json=acceptedFraming,proto3,enum=stellarstation.api.v1.Framing" json:"accepted_framing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SatelliteStreamRequest) Reset()         { *m = SatelliteStreamRequest{} }
func (m *SatelliteStreamRequest) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamRequest) ProtoMessage()    {}
func (*SatelliteStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{0}
}
func (m *SatelliteStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamRequest.Unmarshal(m, b)
}
func (m *SatelliteStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamRequest.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamRequest.Merge(dst, src)
}
func (m *SatelliteStreamRequest) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamRequest.Size(m)
}
func (m *SatelliteStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamRequest proto.InternalMessageInfo

func (m *SatelliteStreamRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *SatelliteStreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

type isSatelliteStreamRequest_Request interface {
	isSatelliteStreamRequest_Request()
}

type SatelliteStreamRequest_SendSatelliteCommandsRequest struct {
	SendSatelliteCommandsRequest *SendSatelliteCommandsRequest `protobuf:"bytes,3,opt,name=send_satellite_commands_request,json=sendSatelliteCommandsRequest,proto3,oneof"`
}

func (*SatelliteStreamRequest_SendSatelliteCommandsRequest) isSatelliteStreamRequest_Request() {}

func (m *SatelliteStreamRequest) GetRequest() isSatelliteStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SatelliteStreamRequest) GetSendSatelliteCommandsRequest() *SendSatelliteCommandsRequest {
	if x, ok := m.GetRequest().(*SatelliteStreamRequest_SendSatelliteCommandsRequest); ok {
		return x.SendSatelliteCommandsRequest
	}
	return nil
}

func (m *SatelliteStreamRequest) GetAcceptedFraming() []Framing {
	if m != nil {
		return m.AcceptedFraming
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamRequest_OneofMarshaler, _SatelliteStreamRequest_OneofUnmarshaler, _SatelliteStreamRequest_OneofSizer, []interface{}{
		(*SatelliteStreamRequest_SendSatelliteCommandsRequest)(nil),
	}
}

func _SatelliteStreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendSatelliteCommandsRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamRequest)
	switch tag {
	case 3: // Request.send_satellite_commands_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendSatelliteCommandsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &SatelliteStreamRequest_SendSatelliteCommandsRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		s := proto.Size(x.SendSatelliteCommandsRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A request to send commands to a satellite.
//
// Next ID: 1
type SendSatelliteCommandsRequest struct {
	// The command frames to send to the satellite. All commands will be transmitted in sequence
	// immediately, during which time telemetry will not be received. After all commands have been
	// transmitted, telemetry receive will be immediately re-enabled. The maximum size of each command
	// is 2MB. If a command larger than 2MB is received, the stream will be closed with a
	// `RESOURCE_EXHAUSTED` error.
	Command              [][]byte `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendSatelliteCommandsRequest) Reset()         { *m = SendSatelliteCommandsRequest{} }
func (m *SendSatelliteCommandsRequest) String() string { return proto.CompactTextString(m) }
func (*SendSatelliteCommandsRequest) ProtoMessage()    {}
func (*SendSatelliteCommandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{1}
}
func (m *SendSatelliteCommandsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Unmarshal(m, b)
}
func (m *SendSatelliteCommandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Marshal(b, m, deterministic)
}
func (dst *SendSatelliteCommandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSatelliteCommandsRequest.Merge(dst, src)
}
func (m *SendSatelliteCommandsRequest) XXX_Size() int {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Size(m)
}
func (m *SendSatelliteCommandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSatelliteCommandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSatelliteCommandsRequest proto.InternalMessageInfo

func (m *SendSatelliteCommandsRequest) GetCommand() [][]byte {
	if m != nil {
		return m.Command
	}
	return nil
}

// A response from the `OpenSatelliteStream` method.
type SatelliteStreamResponse struct {
	// The ID of this stream, which can be used in a subsequent call to `OpenSatelliteStream` to
	// resume this stream on interruption (e.g., if a network failure causes the connection to be
	// closed mid-stream). Telemetry received on a previously opened stream with no current listener
	// will be buffered for a maximum of 1 minute, and the stream itself will be cancelled and no more
	// buffering will occur if no client resumes the stream with `OpenSatelliteStream` within 10
	// minutes.
	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// A response on the stream. Currently the only type of response is telemetry received from the
	// satellite.
	//
	// Types that are valid to be assigned to Response:
	//	*SatelliteStreamResponse_ReceiveTelemetryResponse
	Response             isSatelliteStreamResponse_Response `protobuf_oneof:"Response"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SatelliteStreamResponse) Reset()         { *m = SatelliteStreamResponse{} }
func (m *SatelliteStreamResponse) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamResponse) ProtoMessage()    {}
func (*SatelliteStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{2}
}
func (m *SatelliteStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamResponse.Unmarshal(m, b)
}
func (m *SatelliteStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamResponse.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamResponse.Merge(dst, src)
}
func (m *SatelliteStreamResponse) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamResponse.Size(m)
}
func (m *SatelliteStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamResponse proto.InternalMessageInfo

func (m *SatelliteStreamResponse) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

type isSatelliteStreamResponse_Response interface {
	isSatelliteStreamResponse_Response()
}

type SatelliteStreamResponse_ReceiveTelemetryResponse struct {
	ReceiveTelemetryResponse *ReceiveTelemetryResponse `protobuf:"bytes,2,opt,name=receive_telemetry_response,json=receiveTelemetryResponse,proto3,oneof"`
}

func (*SatelliteStreamResponse_ReceiveTelemetryResponse) isSatelliteStreamResponse_Response() {}

func (m *SatelliteStreamResponse) GetResponse() isSatelliteStreamResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SatelliteStreamResponse) GetReceiveTelemetryResponse() *ReceiveTelemetryResponse {
	if x, ok := m.GetResponse().(*SatelliteStreamResponse_ReceiveTelemetryResponse); ok {
		return x.ReceiveTelemetryResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamResponse_OneofMarshaler, _SatelliteStreamResponse_OneofUnmarshaler, _SatelliteStreamResponse_OneofSizer, []interface{}{
		(*SatelliteStreamResponse_ReceiveTelemetryResponse)(nil),
	}
}

func _SatelliteStreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReceiveTelemetryResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamResponse)
	switch tag {
	case 2: // Response.receive_telemetry_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReceiveTelemetryResponse)
		err := b.DecodeMessage(msg)
		m.Response = &SatelliteStreamResponse_ReceiveTelemetryResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		s := proto.Size(x.ReceiveTelemetryResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A response from a satellite containing telemetry.
type ReceiveTelemetryResponse struct {
	// The telemetry received.
	Telemetry            *Telemetry `protobuf:"bytes,1,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReceiveTelemetryResponse) Reset()         { *m = ReceiveTelemetryResponse{} }
func (m *ReceiveTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveTelemetryResponse) ProtoMessage()    {}
func (*ReceiveTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{3}
}
func (m *ReceiveTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveTelemetryResponse.Unmarshal(m, b)
}
func (m *ReceiveTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveTelemetryResponse.Marshal(b, m, deterministic)
}
func (dst *ReceiveTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveTelemetryResponse.Merge(dst, src)
}
func (m *ReceiveTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveTelemetryResponse.Size(m)
}
func (m *ReceiveTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveTelemetryResponse proto.InternalMessageInfo

func (m *ReceiveTelemetryResponse) GetTelemetry() *Telemetry {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

// A chunk or frame of telemetry data that has been received from a satellite.
type Telemetry struct {
	// The framing of this telemetry data. If `RAW`, this telemetry will be an arbitrarily sized
	// chunk of the bitstream.
	Framing Framing `protobuf:"varint,1,opt,name=framing,proto3,enum=stellarstation.api.v1.Framing" json:"framing,omitempty"`
	// The payload of this telemetry.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The actual downlink frequency, in Hz, used when receiving `data`, including adjustments for
	// doppler shift.
	DownlinkFrequencyHz uint64 `protobuf:"varint,3,opt,name=downlink_frequency_hz,json=downlinkFrequencyHz,proto3" json:"downlink_frequency_hz,omitempty"`
	// Timestamp when the first byte of `data` was received.
	TimeFirstByteReceived *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_first_byte_received,json=timeFirstByteReceived,proto3" json:"time_first_byte_received,omitempty"`
	// Timestamp when the last byte of `data` was received.
	TimeLastByteReceived *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_last_byte_received,json=timeLastByteReceived,proto3" json:"time_last_byte_received,omitempty"`
	// The binary header of the telemetry frame, if `framing` is not `RAW`.
	//
	// * AX25 - This is either Address + Control, or Address + Control + PID. The checksum is not
	//          returned.
	FrameHeader          []byte   `protobuf:"bytes,6,opt,name=frame_header,json=frameHeader,proto3" json:"frame_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{4}
}
func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (dst *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(dst, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

func (m *Telemetry) GetFraming() Framing {
	if m != nil {
		return m.Framing
	}
	return Framing_BITSTREAM
}

func (m *Telemetry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Telemetry) GetDownlinkFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkFrequencyHz
	}
	return 0
}

func (m *Telemetry) GetTimeFirstByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeFirstByteReceived
	}
	return nil
}

func (m *Telemetry) GetTimeLastByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeLastByteReceived
	}
	return nil
}

func (m *Telemetry) GetFrameHeader() []byte {
	if m != nil {
		return m.FrameHeader
	}
	return nil
}

// Request for the `ListGroundstationPlans` method.
type ListGroundStationPlansRequest struct {
	// The ID of the ground station to list plans for. The ID can be found on the StellarStation
	// Console page for the ground station.
	GroundStationId string `protobuf:"bytes,1,opt,name=ground_station_id,json=groundStationId,proto3" json:"ground_station_id,omitempty"`
	// The start time of the range of plans to list (inclusive). Only plans with an Acquisition of
	// Signal (AOS) at or after this time will be returned. It is an error for the duration between
	// `aos_after` and `aos_before` to be longer than 31 days.
	AosAfter *timestamp.Timestamp `protobuf:"bytes,2,opt,name=aos_after,json=aosAfter,proto3" json:"aos_after,omitempty"`
	// The end time of the range of plans to list (exclusive). Only plans with an Acquisition of
	// Signal (AOS) before this time will be returned. It is an error for the duration between
	// `aos_after` and `aos_before` to be longer than 31 days.
	AosBefore            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=aos_before,json=aosBefore,proto3" json:"aos_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListGroundStationPlansRequest) Reset()         { *m = ListGroundStationPlansRequest{} }
func (m *ListGroundStationPlansRequest) String() string { return proto.CompactTextString(m) }
func (*ListGroundStationPlansRequest) ProtoMessage()    {}
func (*ListGroundStationPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{5}
}
func (m *ListGroundStationPlansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGroundStationPlansRequest.Unmarshal(m, b)
}
func (m *ListGroundStationPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGroundStationPlansRequest.Marshal(b, m, deterministic)
}
func (dst *ListGroundStationPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroundStationPlansRequest.Merge(dst, src)
}
func (m *ListGroundStationPlansRequest) XXX_Size() int {
	return xxx_messageInfo_ListGroundStationPlansRequest.Size(m)
}
func (m *ListGroundStationPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroundStationPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroundStationPlansRequest proto.InternalMessageInfo

func (m *ListGroundStationPlansRequest) GetGroundStationId() string {
	if m != nil {
		return m.GroundStationId
	}
	return ""
}

func (m *ListGroundStationPlansRequest) GetAosAfter() *timestamp.Timestamp {
	if m != nil {
		return m.AosAfter
	}
	return nil
}

func (m *ListGroundStationPlansRequest) GetAosBefore() *timestamp.Timestamp {
	if m != nil {
		return m.AosBefore
	}
	return nil
}

// A response from the `ListGroundstationPlans` method.
type ListGroundStationPlansResponse struct {
	// The requested list of plans for the ground station.
	Plan                 []*Plan  `protobuf:"bytes,1,rep,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGroundStationPlansResponse) Reset()         { *m = ListGroundStationPlansResponse{} }
func (m *ListGroundStationPlansResponse) String() string { return proto.CompactTextString(m) }
func (*ListGroundStationPlansResponse) ProtoMessage()    {}
func (*ListGroundStationPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{6}
}
func (m *ListGroundStationPlansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGroundStationPlansResponse.Unmarshal(m, b)
}
func (m *ListGroundStationPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGroundStationPlansResponse.Marshal(b, m, deterministic)
}
func (dst *ListGroundStationPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroundStationPlansResponse.Merge(dst, src)
}
func (m *ListGroundStationPlansResponse) XXX_Size() int {
	return xxx_messageInfo_ListGroundStationPlansResponse.Size(m)
}
func (m *ListGroundStationPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroundStationPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroundStationPlansResponse proto.InternalMessageInfo

func (m *ListGroundStationPlansResponse) GetPlan() []*Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

// A scheduled pass. The plan will be executed on its ground station to communicate with its satellite
// during a time range between AOS and LOS, unless explicitly cancelled.
type Plan struct {
	// The ID of this plan.
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// The status of this plan.
	Status Plan_Status `protobuf:"varint,2,opt,name=status,proto3,enum=stellarstation.api.v1.Plan_Status" json:"status,omitempty"`
	// The TLE for the satellite in this plan.
	Tle *Tle `protobuf:"bytes,3,opt,name=tle,proto3" json:"tle,omitempty"`
	// The time of AOS between the ground station and satellite in this plan.
	AosTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=aos_time,json=aosTime,proto3" json:"aos_time,omitempty"`
	// The time of LOS between the ground station and satellite in this plan.
	LosTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=los_time,json=losTime,proto3" json:"los_time,omitempty"`
	// The center frequency, in Hz, for downlinking in this plan. 0 if downlink is not available in
	// this plan.
	DownlinkCenterFrequencyHz uint64 `protobuf:"varint,6,opt,name=downlink_center_frequency_hz,json=downlinkCenterFrequencyHz,proto3" json:"downlink_center_frequency_hz,omitempty"`
	// The center frequency, in Hz, for uplinking in this plan. 0 if uplink is not available in this
	// plan.
	UplinkCenterFrequencyHz uint64 `protobuf:"varint,7,opt,name=uplink_center_frequency_hz,json=uplinkCenterFrequencyHz,proto3" json:"uplink_center_frequency_hz,omitempty"`
	// The max elevation of the plan, in degrees.
	MaxElevationDegrees float64 `protobuf:"fixed64,8,opt,name=max_elevation_degrees,json=maxElevationDegrees,proto3" json:"max_elevation_degrees,omitempty"`
	// The time of max elevation during the plan.
	MaxElevationTime     *timestamp.Timestamp `protobuf:"bytes,9,opt,name=max_elevation_time,json=maxElevationTime,proto3" json:"max_elevation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{7}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plan.Unmarshal(m, b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
}
func (dst *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(dst, src)
}
func (m *Plan) XXX_Size() int {
	return xxx_messageInfo_Plan.Size(m)
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *Plan) GetStatus() Plan_Status {
	if m != nil {
		return m.Status
	}
	return Plan_RESERVED
}

func (m *Plan) GetTle() *Tle {
	if m != nil {
		return m.Tle
	}
	return nil
}

func (m *Plan) GetAosTime() *timestamp.Timestamp {
	if m != nil {
		return m.AosTime
	}
	return nil
}

func (m *Plan) GetLosTime() *timestamp.Timestamp {
	if m != nil {
		return m.LosTime
	}
	return nil
}

func (m *Plan) GetDownlinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkCenterFrequencyHz
	}
	return 0
}

func (m *Plan) GetUplinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.UplinkCenterFrequencyHz
	}
	return 0
}

func (m *Plan) GetMaxElevationDegrees() float64 {
	if m != nil {
		return m.MaxElevationDegrees
	}
	return 0
}

func (m *Plan) GetMaxElevationTime() *timestamp.Timestamp {
	if m != nil {
		return m.MaxElevationTime
	}
	return nil
}

// Unparsed TLE data for a satellite - https://en.wikipedia.org/wiki/Two-line_element_set
type Tle struct {
	// The first line of the TLE. Not a title line.
	Line_1 string `protobuf:"bytes,1,opt,name=line_1,json=line1,proto3" json:"line_1,omitempty"`
	// The second line of the TLE.
	Line_2               string   `protobuf:"bytes,2,opt,name=line_2,json=line2,proto3" json:"line_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tle) Reset()         { *m = Tle{} }
func (m *Tle) String() string { return proto.CompactTextString(m) }
func (*Tle) ProtoMessage()    {}
func (*Tle) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_818bd040976dd88a, []int{8}
}
func (m *Tle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tle.Unmarshal(m, b)
}
func (m *Tle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tle.Marshal(b, m, deterministic)
}
func (dst *Tle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tle.Merge(dst, src)
}
func (m *Tle) XXX_Size() int {
	return xxx_messageInfo_Tle.Size(m)
}
func (m *Tle) XXX_DiscardUnknown() {
	xxx_messageInfo_Tle.DiscardUnknown(m)
}

var xxx_messageInfo_Tle proto.InternalMessageInfo

func (m *Tle) GetLine_1() string {
	if m != nil {
		return m.Line_1
	}
	return ""
}

func (m *Tle) GetLine_2() string {
	if m != nil {
		return m.Line_2
	}
	return ""
}

func init() {
	proto.RegisterType((*SatelliteStreamRequest)(nil), "stellarstation.api.v1.SatelliteStreamRequest")
	proto.RegisterType((*SendSatelliteCommandsRequest)(nil), "stellarstation.api.v1.SendSatelliteCommandsRequest")
	proto.RegisterType((*SatelliteStreamResponse)(nil), "stellarstation.api.v1.SatelliteStreamResponse")
	proto.RegisterType((*ReceiveTelemetryResponse)(nil), "stellarstation.api.v1.ReceiveTelemetryResponse")
	proto.RegisterType((*Telemetry)(nil), "stellarstation.api.v1.Telemetry")
	proto.RegisterType((*ListGroundStationPlansRequest)(nil), "stellarstation.api.v1.ListGroundStationPlansRequest")
	proto.RegisterType((*ListGroundStationPlansResponse)(nil), "stellarstation.api.v1.ListGroundStationPlansResponse")
	proto.RegisterType((*Plan)(nil), "stellarstation.api.v1.Plan")
	proto.RegisterType((*Tle)(nil), "stellarstation.api.v1.Tle")
	proto.RegisterEnum("stellarstation.api.v1.Framing", Framing_name, Framing_value)
	proto.RegisterEnum("stellarstation.api.v1.Plan_Status", Plan_Status_name, Plan_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StellarStationServiceClient is the client API for StellarStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StellarStationServiceClient interface {
	// Lists the plans for a particular ground station.
	//
	// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
	// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
	// 31 days.
	ListGroundStationPlans(ctx context.Context, in *ListGroundStationPlansRequest, opts ...grpc.CallOption) (*ListGroundStationPlansResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes from this
	// point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error)
}

type stellarStationServiceClient struct {
	cc *grpc.ClientConn
}

func NewStellarStationServiceClient(cc *grpc.ClientConn) StellarStationServiceClient {
	return &stellarStationServiceClient{cc}
}

func (c *stellarStationServiceClient) ListGroundStationPlans(ctx context.Context, in *ListGroundStationPlansRequest, opts ...grpc.CallOption) (*ListGroundStationPlansResponse, error) {
	out := new(ListGroundStationPlansResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/ListGroundStationPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StellarStationService_serviceDesc.Streams[0], "/stellarstation.api.v1.StellarStationService/OpenSatelliteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stellarStationServiceOpenSatelliteStreamClient{stream}
	return x, nil
}

type StellarStationService_OpenSatelliteStreamClient interface {
	Send(*SatelliteStreamRequest) error
	Recv() (*SatelliteStreamResponse, error)
	grpc.ClientStream
}

type stellarStationServiceOpenSatelliteStreamClient struct {
	grpc.ClientStream
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Send(m *SatelliteStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Recv() (*SatelliteStreamResponse, error) {
	m := new(SatelliteStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StellarStationServiceServer is the server API for StellarStationService service.
type StellarStationServiceServer interface {
	// Lists the plans for a particular ground station.
	//
	// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
	// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
	// 31 days.
	ListGroundStationPlans(context.Context, *ListGroundStationPlansRequest) (*ListGroundStationPlansResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes from this
	// point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(StellarStationService_OpenSatelliteStreamServer) error
}

func RegisterStellarStationServiceServer(s *grpc.Server, srv StellarStationServiceServer) {
	s.RegisterService(&_StellarStationService_serviceDesc, srv)
}

func _StellarStationService_ListGroundStationPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroundStationPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).ListGroundStationPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/ListGroundStationPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).ListGroundStationPlans(ctx, req.(*ListGroundStationPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_OpenSatelliteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StellarStationServiceServer).OpenSatelliteStream(&stellarStationServiceOpenSatelliteStreamServer{stream})
}

type StellarStationService_OpenSatelliteStreamServer interface {
	Send(*SatelliteStreamResponse) error
	Recv() (*SatelliteStreamRequest, error)
	grpc.ServerStream
}

type stellarStationServiceOpenSatelliteStreamServer struct {
	grpc.ServerStream
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Send(m *SatelliteStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Recv() (*SatelliteStreamRequest, error) {
	m := new(SatelliteStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StellarStationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellarstation.api.v1.StellarStationService",
	HandlerType: (*StellarStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGroundStationPlans",
			Handler:    _StellarStationService_ListGroundStationPlans_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenSatelliteStream",
			Handler:       _StellarStationService_OpenSatelliteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stellarstation/api/v1/stellarstation.proto",
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/stellarstation.proto", fileDescriptor_stellarstation_818bd040976dd88a)
}

var fileDescriptor_stellarstation_818bd040976dd88a = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x52, 0xdb, 0x56,
	0x10, 0xc7, 0x91, 0xed, 0xf8, 0x63, 0x4d, 0x89, 0x7a, 0xa8, 0x83, 0xe2, 0xd0, 0xc4, 0xd1, 0x95,
	0x87, 0x69, 0xed, 0x22, 0xca, 0x34, 0x69, 0x67, 0xda, 0xb1, 0x8d, 0x00, 0xcd, 0x10, 0x02, 0x92,
	0xd3, 0xc9, 0xe4, 0x46, 0x73, 0xb0, 0xd6, 0x8e, 0xa6, 0xfa, 0x70, 0xa5, 0x03, 0x85, 0x4c, 0x6f,
	0xfb, 0x10, 0x7d, 0x87, 0xde, 0xf5, 0x01, 0x7a, 0xd3, 0x87, 0xe8, 0xe3, 0x74, 0xce, 0x91, 0x64,
	0x63, 0x40, 0x26, 0xb9, 0xf3, 0xd9, 0xdd, 0xdf, 0x9e, 0xdd, 0xd5, 0x7f, 0x25, 0xc3, 0x56, 0xcc,
	0xd0, 0xf3, 0x68, 0x14, 0x33, 0xca, 0xdc, 0x30, 0xe8, 0xd2, 0xa9, 0xdb, 0xbd, 0xd8, 0xee, 0x2e,
	0x5a, 0x3b, 0xd3, 0x28, 0x64, 0x21, 0x69, 0xdc, 0xb0, 0xd2, 0xa9, 0xdb, 0xb9, 0xd8, 0x6e, 0x3e,
	0x9b, 0x84, 0xe1, 0xc4, 0xc3, 0xae, 0x08, 0x3a, 0x3b, 0x1f, 0x77, 0x99, 0xeb, 0x63, 0xcc, 0xa8,
	0x3f, 0x4d, 0x38, 0xf5, 0xaf, 0x02, 0x3c, 0xb2, 0x28, 0x67, 0x5d, 0x86, 0x16, 0x8b, 0x90, 0xfa,
	0x26, 0xfe, 0x7a, 0x8e, 0x31, 0x23, 0xcf, 0x61, 0x35, 0xce, 0x3c, 0xb6, 0xeb, 0x28, 0x52, 0x4b,
	0x6a, 0xd7, 0xcc, 0xfa, 0xcc, 0x66, 0x38, 0xe4, 0x09, 0xd4, 0x62, 0xc1, 0x70, 0x7f, 0x41, 0xf8,
	0xab, 0x89, 0xc1, 0x70, 0xc8, 0xef, 0xf0, 0x2c, 0xc6, 0xc0, 0xb1, 0xe7, 0x49, 0x46, 0xa1, 0xef,
	0xd3, 0xc0, 0x89, 0xed, 0x28, 0xb9, 0x42, 0x29, 0xb6, 0xa4, 0x76, 0x5d, 0xdb, 0xe9, 0xdc, 0x59,
	0x7c, 0xc7, 0xc2, 0xc0, 0x99, 0xd5, 0x36, 0x48, 0xd9, 0xb4, 0xba, 0xc3, 0x15, 0x73, 0x33, 0x5e,
	0xe2, 0x27, 0x06, 0xc8, 0x74, 0x34, 0xc2, 0x29, 0x43, 0xc7, 0x1e, 0x47, 0xd4, 0x77, 0x83, 0x89,
	0x52, 0x6a, 0x15, 0xdb, 0x6b, 0xda, 0xd3, 0x9c, 0xeb, 0xf6, 0x93, 0x28, 0xf3, 0x61, 0xc6, 0xa5,
	0x86, 0x7e, 0x0d, 0x2a, 0x69, 0x56, 0xf5, 0x05, 0x6c, 0x2e, 0xab, 0x8a, 0x28, 0x50, 0x49, 0x9b,
	0x54, 0x0a, 0xad, 0x62, 0x7b, 0xd5, 0xcc, 0x8e, 0xea, 0xdf, 0x12, 0x6c, 0xdc, 0x1a, 0x74, 0x3c,
	0x0d, 0x83, 0x18, 0x17, 0xc7, 0x28, 0xdd, 0x18, 0x63, 0x08, 0xcd, 0x08, 0x47, 0xe8, 0x5e, 0xa0,
	0xcd, 0xd0, 0x43, 0x1f, 0x59, 0x74, 0x65, 0x47, 0x29, 0x2a, 0x86, 0x5e, 0xd7, 0xba, 0x39, 0x2d,
	0x99, 0x09, 0x38, 0xcc, 0xb8, 0xec, 0xc6, 0xc3, 0x15, 0x53, 0x89, 0x72, 0x7c, 0x7d, 0x80, 0x6a,
	0xf6, 0x5b, 0x7d, 0x07, 0x4a, 0x5e, 0x0e, 0xf2, 0x23, 0xd4, 0x66, 0x05, 0x89, 0xaa, 0xeb, 0x5a,
	0x2b, 0xa7, 0x8e, 0x39, 0x3c, 0x47, 0xd4, 0xff, 0x0a, 0x50, 0x9b, 0x39, 0xc8, 0x0b, 0xa8, 0x64,
	0x8f, 0x89, 0xe7, 0xba, 0xff, 0x31, 0x65, 0xe1, 0x84, 0x40, 0xc9, 0xa1, 0x8c, 0x8a, 0x51, 0xac,
	0x9a, 0xe2, 0x37, 0xd1, 0xa0, 0xe1, 0x84, 0xbf, 0x05, 0x9e, 0x1b, 0xfc, 0x62, 0x8f, 0x85, 0xda,
	0x82, 0xd1, 0x95, 0xfd, 0xfe, 0x83, 0x50, 0x5c, 0xc9, 0x5c, 0xcf, 0x9c, 0xfb, 0x99, 0xef, 0xf0,
	0x03, 0xb1, 0x40, 0xe1, 0xdb, 0x61, 0x8f, 0xdd, 0x28, 0x66, 0xf6, 0xd9, 0x15, 0x43, 0x3b, 0x9d,
	0x91, 0xa3, 0x94, 0x44, 0x7b, 0xcd, 0x4e, 0xb2, 0x4e, 0x9d, 0x6c, 0x9d, 0x3a, 0xc3, 0x6c, 0x9d,
	0xcc, 0x06, 0x67, 0xf7, 0x39, 0xda, 0xbf, 0x62, 0x98, 0x0e, 0xcd, 0x21, 0xa7, 0xb0, 0x21, 0x92,
	0x7a, 0xf4, 0x56, 0xce, 0x07, 0xf7, 0xe6, 0xfc, 0x82, 0xa3, 0x47, 0xf4, 0x46, 0xca, 0xe7, 0xb0,
	0xca, 0x5b, 0x47, 0xfb, 0x3d, 0x52, 0x07, 0x23, 0xa5, 0x2c, 0xfa, 0xae, 0x0b, 0xdb, 0xa1, 0x30,
	0xa9, 0xff, 0x48, 0xf0, 0xe5, 0x91, 0x1b, 0xb3, 0x83, 0x28, 0x3c, 0x0f, 0x1c, 0x2b, 0x19, 0xe0,
	0x89, 0x47, 0x83, 0x99, 0x50, 0xb7, 0xe0, 0xf3, 0x89, 0x70, 0xda, 0xe9, 0x78, 0xe7, 0xd2, 0x7b,
	0x38, 0xb9, 0x4e, 0x19, 0x0e, 0xf9, 0x0e, 0x6a, 0x34, 0x8c, 0x6d, 0x3a, 0x66, 0x18, 0xa5, 0x82,
	0x5b, 0x56, 0x75, 0x95, 0x86, 0x71, 0x8f, 0xc7, 0x92, 0x97, 0x00, 0x1c, 0x3c, 0xc3, 0x71, 0x18,
	0x61, 0xba, 0xec, 0xcb, 0x48, 0x7e, 0x4d, 0x5f, 0x04, 0xab, 0xa7, 0xf0, 0x34, 0xaf, 0x81, 0x54,
	0x7e, 0x5d, 0x28, 0x4d, 0x3d, 0x1a, 0x28, 0x52, 0xab, 0xd8, 0xae, 0x6b, 0x4f, 0x72, 0xd4, 0xc2,
	0x19, 0x53, 0x04, 0xaa, 0xff, 0x96, 0xa0, 0xc4, 0x8f, 0x64, 0x03, 0x2a, 0xdc, 0x30, 0xef, 0xb8,
	0xcc, 0x8f, 0x86, 0x43, 0xbe, 0x87, 0x32, 0xc7, 0xcf, 0x63, 0xd1, 0xe5, 0x9a, 0xa6, 0x2e, 0x49,
	0xda, 0xb1, 0x44, 0xa4, 0x99, 0x12, 0xe4, 0x2b, 0x28, 0x32, 0x6f, 0xde, 0x64, 0xce, 0x1e, 0x78,
	0x68, 0xf2, 0x30, 0xb2, 0x0b, 0x7c, 0x4a, 0x36, 0x7f, 0xbe, 0x1f, 0xa1, 0xad, 0x0a, 0x0d, 0x63,
	0x7e, 0xe2, 0x98, 0x97, 0x61, 0xf7, 0xcb, 0xa7, 0xe2, 0xa5, 0xd8, 0x4f, 0xb0, 0x39, 0xdb, 0x86,
	0x11, 0x06, 0x0c, 0xa3, 0xc5, 0xa5, 0x28, 0x8b, 0xa5, 0x78, 0x9c, 0xc5, 0x0c, 0x44, 0xc8, 0xf5,
	0xd5, 0xf8, 0x01, 0x9a, 0xe7, 0xd3, 0x5c, 0xbc, 0x22, 0xf0, 0x8d, 0x24, 0xe2, 0x36, 0xac, 0x41,
	0xc3, 0xa7, 0x97, 0x36, 0x7a, 0x78, 0x91, 0x28, 0xcd, 0xc1, 0x49, 0x84, 0x18, 0x2b, 0xd5, 0x96,
	0xd4, 0x96, 0xcc, 0x75, 0x9f, 0x5e, 0xea, 0x99, 0x6f, 0x2f, 0x71, 0x91, 0x43, 0x20, 0x8b, 0x8c,
	0x68, 0xb9, 0x76, 0x6f, 0xcb, 0xf2, 0xf5, 0x64, 0xdc, 0xac, 0xbe, 0x86, 0x72, 0xf2, 0xa4, 0xc8,
	0x2a, 0x54, 0x4d, 0xdd, 0xd2, 0xcd, 0x9f, 0xf5, 0x3d, 0x79, 0x85, 0x7c, 0x06, 0x35, 0xfd, 0xad,
	0x3e, 0x78, 0x33, 0x34, 0x8e, 0x0f, 0x64, 0x89, 0x1f, 0xad, 0x37, 0x83, 0x81, 0xae, 0xef, 0xe9,
	0x7b, 0x72, 0x81, 0x00, 0x94, 0xf7, 0x7b, 0xc6, 0x91, 0xbe, 0x27, 0x17, 0xb9, 0x6b, 0xd0, 0x3b,
	0x1e, 0xe8, 0x47, 0xfc, 0x58, 0x52, 0x77, 0xa0, 0x38, 0xf4, 0x90, 0x34, 0xa0, 0xec, 0xb9, 0x01,
	0xda, 0xdb, 0xa9, 0x86, 0x1e, 0xf0, 0xd3, 0xf6, 0xcc, 0xac, 0xa5, 0x9f, 0x43, 0x61, 0xd6, 0xb6,
	0x5e, 0x42, 0x25, 0x7d, 0x6f, 0xf1, 0x74, 0x7d, 0x63, 0x68, 0x0d, 0x4d, 0xbd, 0xf7, 0x4a, 0x5e,
	0x21, 0x55, 0x28, 0xf5, 0xde, 0x6a, 0xbb, 0xb2, 0x44, 0xca, 0x50, 0x30, 0x4e, 0xe5, 0x02, 0x0f,
	0x30, 0x5e, 0xf5, 0x0e, 0x74, 0xfb, 0xe4, 0xf8, 0x40, 0x2e, 0x6a, 0x7f, 0x16, 0xa0, 0x61, 0x25,
	0x6a, 0x4a, 0xf7, 0xc0, 0xc2, 0xe8, 0xc2, 0x1d, 0x21, 0xf9, 0x43, 0x82, 0x47, 0x77, 0x2f, 0x09,
	0xf9, 0x36, 0x47, 0x80, 0x4b, 0x5f, 0x0a, 0xcd, 0xdd, 0x4f, 0xa4, 0xd2, 0x4d, 0xbc, 0x84, 0xf5,
	0xd7, 0x53, 0x0c, 0x6e, 0x7c, 0xdd, 0xc8, 0xd7, 0x79, 0x9f, 0xf5, 0x3b, 0xff, 0x6e, 0x34, 0x3b,
	0x1f, 0x1b, 0x9e, 0xdc, 0xda, 0x96, 0xbe, 0x91, 0xfa, 0x7d, 0x78, 0x3c, 0x0a, 0xfd, 0xbb, 0xc1,
	0xfe, 0xba, 0xb5, 0x60, 0x3e, 0xe1, 0x6a, 0x39, 0x91, 0xde, 0xad, 0x2d, 0x46, 0x9f, 0x95, 0x85,
	0x8c, 0x76, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xac, 0xdf, 0x59, 0xeb, 0x6e, 0x09, 0x00, 0x00,
}
